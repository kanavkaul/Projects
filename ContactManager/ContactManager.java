/*
Name: Kanav Kaul    Net ID: kxk140730   Date: September 26, 2014
Assignment 2 - CS 6301.022 (User Interface and Design)

The application, Contact Manager, allows users to save the contact information.
The contact information is then saved onto a .txt file which can be retrieved later.
The user can Add, Modify or Delete the details about a person.

*/
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
  
      
public class ContactManager extends javax.swing.JFrame {
String arr[][];
    
    /*
        Creates new form ContactManager
    */
    public ContactManager() {
    //constructor of ContactManager. This method is called to initialize the values of the different components in the form.    
        initComponents();

        
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_notify = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lbl_fname = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        lbl_mi = new javax.swing.JLabel();
        tmiIn = new javax.swing.JTextField();
        lmi = new javax.swing.JLabel();
        lbl_lname = new javax.swing.JLabel();
        tlName = new javax.swing.JTextField();
        lbl_gen = new javax.swing.JLabel();
        tgen = new javax.swing.JTextField();
        lbl_addr1 = new javax.swing.JLabel();
        taddr1 = new javax.swing.JTextField();
        lbl_addr2 = new javax.swing.JLabel();
        taddr2 = new javax.swing.JTextField();
        lfname = new javax.swing.JLabel();
        llname = new javax.swing.JLabel();
        lgen = new javax.swing.JLabel();
        laddr1 = new javax.swing.JLabel();
        lbl_city = new javax.swing.JLabel();
        tcity = new javax.swing.JTextField();
        lbl_state = new javax.swing.JLabel();
        tstate = new javax.swing.JTextField();
        lbl_zip = new javax.swing.JLabel();
        tzip = new javax.swing.JTextField();
        lbl_phno = new javax.swing.JLabel();
        lcity = new javax.swing.JLabel();
        lstate = new javax.swing.JLabel();
        laddr2 = new javax.swing.JLabel();
        Save_Button = new javax.swing.JButton();
        Delete_Button = new javax.swing.JButton();
        Clear_Button = new javax.swing.JButton();
        lbl_info = new javax.swing.JLabel();
        Modify_Button = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tphno = new javax.swing.JTextField();
        temail = new javax.swing.JTextField();
        tcountry = new javax.swing.JTextField();
        lemail = new javax.swing.JLabel();
        lcountry = new javax.swing.JLabel();
        lph = new javax.swing.JLabel();
        lzip = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Contact Manager");
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(950, 625));

        lbl_notify.setForeground(new java.awt.Color(255, 0, 0));
        lbl_notify.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jPanel1.setLayout(null);

        lbl_fname.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_fname.setText("First Name *");
        lbl_fname.setAlignmentY(0.0F);
        lbl_fname.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(lbl_fname);
        lbl_fname.setBounds(30, 20, 80, 20);

        tfName.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        tfName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfNameFocusLost(evt);
            }
        });
        tfName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfNameMouseClicked(evt);
            }
        });
        tfName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfNameActionPerformed(evt);
            }
        });
        tfName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfNameKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfNameKeyTyped(evt);
            }
        });
        jPanel1.add(tfName);
        tfName.setBounds(120, 10, 280, 30);

        lbl_mi.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_mi.setText("Middle Initial");
        lbl_mi.setAlignmentY(0.0F);
        lbl_mi.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(lbl_mi);
        lbl_mi.setBounds(10, 60, 100, 20);

        tmiIn.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tmiInFocusLost(evt);
            }
        });
        tmiIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tmiInActionPerformed(evt);
            }
        });
        tmiIn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tmiInKeyPressed(evt);
            }
        });
        jPanel1.add(tmiIn);
        tmiIn.setBounds(120, 50, 280, 30);

        lmi.setForeground(new java.awt.Color(255, 0, 0));
        lmi.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jPanel1.add(lmi);
        lmi.setBounds(410, 60, 180, 20);

        lbl_lname.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_lname.setText("Last Name *");
        lbl_lname.setAlignmentY(0.0F);
        lbl_lname.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(lbl_lname);
        lbl_lname.setBounds(10, 100, 100, 20);

        tlName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tlNameFocusLost(evt);
            }
        });
        tlName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tlNameActionPerformed(evt);
            }
        });
        tlName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tlNameKeyPressed(evt);
            }
        });
        jPanel1.add(tlName);
        tlName.setBounds(120, 90, 280, 30);

        lbl_gen.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_gen.setText("Gender *");
        lbl_gen.setAlignmentY(0.0F);
        lbl_gen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(lbl_gen);
        lbl_gen.setBounds(10, 140, 100, 20);

        tgen.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tgenFocusLost(evt);
            }
        });
        tgen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tgenActionPerformed(evt);
            }
        });
        tgen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tgenKeyPressed(evt);
            }
        });
        jPanel1.add(tgen);
        tgen.setBounds(120, 130, 280, 30);

        lbl_addr1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_addr1.setText("Address Line 1 *");
        lbl_addr1.setAlignmentY(0.0F);
        lbl_addr1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(lbl_addr1);
        lbl_addr1.setBounds(10, 180, 100, 20);

        taddr1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                taddr1FocusLost(evt);
            }
        });
        taddr1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taddr1ActionPerformed(evt);
            }
        });
        taddr1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                taddr1KeyPressed(evt);
            }
        });
        jPanel1.add(taddr1);
        taddr1.setBounds(120, 170, 280, 30);

        lbl_addr2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_addr2.setText("Address Line 2");
        lbl_addr2.setAlignmentY(0.0F);
        lbl_addr2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(lbl_addr2);
        lbl_addr2.setBounds(10, 220, 100, 20);

        taddr2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                taddr2FocusLost(evt);
            }
        });
        taddr2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taddr2ActionPerformed(evt);
            }
        });
        taddr2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                taddr2KeyPressed(evt);
            }
        });
        jPanel1.add(taddr2);
        taddr2.setBounds(120, 210, 280, 30);

        lfname.setForeground(new java.awt.Color(255, 0, 0));
        lfname.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jPanel1.add(lfname);
        lfname.setBounds(410, 20, 180, 20);

        llname.setForeground(new java.awt.Color(255, 0, 0));
        llname.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jPanel1.add(llname);
        llname.setBounds(410, 100, 180, 20);

        lgen.setForeground(new java.awt.Color(255, 0, 0));
        lgen.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jPanel1.add(lgen);
        lgen.setBounds(410, 140, 180, 20);

        laddr1.setForeground(new java.awt.Color(255, 0, 0));
        laddr1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jPanel1.add(laddr1);
        laddr1.setBounds(410, 180, 180, 20);

        lbl_city.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_city.setText("City *");
        lbl_city.setAlignmentY(0.0F);
        lbl_city.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(lbl_city);
        lbl_city.setBounds(10, 260, 100, 20);

        tcity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tcityFocusLost(evt);
            }
        });
        tcity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tcityActionPerformed(evt);
            }
        });
        tcity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tcityKeyPressed(evt);
            }
        });
        jPanel1.add(tcity);
        tcity.setBounds(120, 250, 280, 30);

        lbl_state.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_state.setText("State *");
        lbl_state.setAlignmentY(0.0F);
        lbl_state.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(lbl_state);
        lbl_state.setBounds(10, 300, 100, 20);

        tstate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tstateFocusLost(evt);
            }
        });
        tstate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tstateActionPerformed(evt);
            }
        });
        tstate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tstateKeyPressed(evt);
            }
        });
        jPanel1.add(tstate);
        tstate.setBounds(120, 290, 280, 30);

        lbl_zip.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_zip.setText("Zip Code *");
        lbl_zip.setAlignmentY(0.0F);
        jPanel1.add(lbl_zip);
        lbl_zip.setBounds(20, 380, 90, 20);

        tzip.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tzipFocusLost(evt);
            }
        });
        tzip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tzipActionPerformed(evt);
            }
        });
        tzip.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tzipKeyPressed(evt);
            }
        });
        jPanel1.add(tzip);
        tzip.setBounds(120, 370, 280, 30);

        lbl_phno.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_phno.setText("Phone No *");
        lbl_phno.setAlignmentY(0.0F);
        jPanel1.add(lbl_phno);
        lbl_phno.setBounds(20, 460, 90, 19);

        lcity.setForeground(new java.awt.Color(255, 0, 0));
        lcity.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jPanel1.add(lcity);
        lcity.setBounds(410, 260, 180, 20);

        lstate.setForeground(new java.awt.Color(255, 0, 0));
        lstate.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jPanel1.add(lstate);
        lstate.setBounds(410, 300, 180, 19);

        laddr2.setForeground(new java.awt.Color(255, 0, 0));
        laddr2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jPanel1.add(laddr2);
        laddr2.setBounds(410, 220, 180, 20);

        Save_Button.setText("Save");
        Save_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_ButtonActionPerformed(evt);
            }
        });
        jPanel1.add(Save_Button);
        Save_Button.setBounds(30, 520, 80, 23);

        Delete_Button.setText("Delete");
        Delete_Button.setEnabled(false);
        Delete_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_ButtonActionPerformed(evt);
            }
        });
        jPanel1.add(Delete_Button);
        Delete_Button.setBounds(260, 520, 80, 23);

        Clear_Button.setText("Clear");
        Clear_Button.setEnabled(false);
        Clear_Button.setNextFocusableComponent(jPanel1);
        Clear_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Clear_ButtonActionPerformed(evt);
            }
        });
        jPanel1.add(Clear_Button);
        Clear_Button.setBounds(380, 520, 80, 23);

        lbl_info.setForeground(new java.awt.Color(0, 0, 255));
        lbl_info.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_info.setText("All fields marked with * are compulsory");
        lbl_info.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(lbl_info);
        lbl_info.setBounds(10, 550, 300, 20);

        Modify_Button.setText("Update");
        Modify_Button.setEnabled(false);
        Modify_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Modify_ButtonActionPerformed(evt);
            }
        });
        jPanel1.add(Modify_Button);
        Modify_Button.setBounds(150, 520, 70, 23);

        jProgressBar1.setBackground(Color.GREEN);
        jProgressBar1.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.add(jProgressBar1);
        jProgressBar1.setBounds(120, 496, 280, 14);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Country*");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jLabel1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(jLabel1);
        jLabel1.setBounds(20, 340, 90, 20);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("E Mail*");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(20, 420, 90, 20);

        tphno.setNextFocusableComponent(Save_Button);
        tphno.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tphnoFocusLost(evt);
            }
        });
        tphno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tphnoActionPerformed(evt);
            }
        });
        tphno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tphnoKeyPressed(evt);
            }
        });
        jPanel1.add(tphno);
        tphno.setBounds(120, 450, 280, 30);

        temail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                temailFocusLost(evt);
            }
        });
        jPanel1.add(temail);
        temail.setBounds(120, 410, 280, 30);

        tcountry.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tcountryFocusLost(evt);
            }
        });
        tcountry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tcountryActionPerformed(evt);
            }
        });
        jPanel1.add(tcountry);
        tcountry.setBounds(120, 330, 280, 30);

        lemail.setForeground(new java.awt.Color(255, 0, 0));
        lemail.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(lemail);
        lemail.setBounds(410, 420, 180, 20);

        lcountry.setForeground(new java.awt.Color(255, 0, 0));
        lcountry.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(lcountry);
        lcountry.setBounds(410, 340, 180, 20);

        lph.setForeground(new java.awt.Color(255, 0, 0));
        lph.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jPanel1.add(lph);
        lph.setBounds(410, 460, 180, 20);

        lzip.setForeground(new java.awt.Color(255, 0, 0));
        lzip.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jPanel1.add(lzip);
        lzip.setBounds(410, 380, 180, 20);

        jScrollPane1.setNextFocusableComponent(jPanel1);

        table.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Contact Details"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        table.setDragEnabled(true);
        table.setFocusable(false);
        table.setNextFocusableComponent(tfName);
        table.getTableHeader().setResizingAllowed(false);
        table.setUpdateSelectionOnSort(false);
        tableConfig();
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);
        table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lbl_notify, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(247, 247, 247))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lbl_notify, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(376, 376, 376))
        );

        setSize(new java.awt.Dimension(976, 663));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void tableConfig() {
        /*
        This method is used to configure the table. The table retrieves the information from the .txt file and then displays it on the list. 
        */              
        table.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Name","Number"
                }){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
                });
               int i = 0;
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        try (BufferedReader reader = new BufferedReader(new FileReader("Contacts.txt"))) {
            String line = reader.readLine();
            if(line!=null){
            while (line != null) {
                String[] parts = line.split("\t");
                line = reader.readLine();
              String value1 = parts[9];  
              String value = parts[0]+" "+parts[1]+" "+parts[2];
              Object[] row = {value , value1};
              model.addRow(row);
              
            }
            }		
        } catch (Exception e) {
        }
        
        arr = ToArray();
        table.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (SwingUtilities.isLeftMouseButton(e) && e.getClickCount() == 1 && table.getSelectedColumn() > -1 && table.getSelectedRow() > -1) {
                    int row = table.getSelectedRow();

                                tfName.setText(arr[row][0]);
                                tmiIn.setText(arr[row][1]);
                                tlName.setText(arr[row][2]);
                                taddr1.setText(arr[row][4]);
                                taddr2.setText(arr[row][5]);
                                tcity.setText(arr[row][6]);
                                tgen.setText(arr[row][3]);
                                tphno.setText(arr[row][9]);
                                tstate.setText(arr[row][7]);
                                tzip.setText(arr[row][8]);
                                tcountry.setText(arr[row][10]);
                                temail.setText(arr[row][11]);
                               
                                Clear_Button.setEnabled(true);
                                Save_Button.setEnabled(false);
                                Modify_Button.setEnabled(true);
                                Delete_Button.setEnabled(true);
                                lbl_notify.setText("");
                                ClearWarning();
                                 jProgressBar1.setValue(100);
                }
            }
        });
    }
    
    public String[][] ToArray(){
        /*
        This method is used to read from the .txt file and then store the corresponding values of the record into an array.
        This array is then passed onto the table which displays the information to the user.
        */
        int i=0;
        arr = new String[table.getRowCount()][12];
        try (BufferedReader reader = new BufferedReader(new FileReader("Contacts.txt"))) {
            String line = reader.readLine();
            if(line!=null){
            while (line != null) {
               
                String[] parts = line.split("\t");
                line = reader.readLine();
                for(int j=0;j<12;j++){
                    arr[i][j] = parts[j];
                   
                }
               i++;
               
            }
            }		
        } catch (Exception e) {
        }
        return arr;
    }
    
    private void tgenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tgenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tgenActionPerformed

    private void taddr1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taddr1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_taddr1ActionPerformed

    private void tstateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tstateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tstateActionPerformed

    private void tphnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tphnoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tphnoActionPerformed

    private void tzipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tzipActionPerformed
        // TODO add your handling code here:       
    }//GEN-LAST:event_tzipActionPerformed

    private void tcityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tcityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tcityActionPerformed

    private void taddr2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taddr2ActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_taddr2ActionPerformed

    private void Save_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_ButtonActionPerformed
        

        /*
        This method is invoked when the user clicks on the save button.
        */
          ExtractAndAdd();
  
    }//GEN-LAST:event_Save_ButtonActionPerformed

    int CheckDuplicate(String fName, String lName, String mi_in, int flag){
        /*
        
        This method is used to check if the information entered by the user already exists in the system.
        The method takes the first name, middle initial and the last name along with a flag variable as the input.
        The method returns a flag variable. If flag=1, then the record already exists, otherwise the application goes ahead to store the information.
        
        */
        
        String comp = fName + " " + mi_in + " " + lName;
     
            for (int j = 0; j < table.getRowCount(); j++) {
                String xyz = arr[j][0]+" "+arr[j][1]+" "+arr[j][2];   
                if (xyz.equalsIgnoreCase(comp) ) {
                    flag = 1;
                    lbl_notify.setText("This Record already exits");
                    lbl_notify.setVisible(true);
                    Clear_Button.setEnabled(true);
                }
            }  
        
        return flag;
    }
    
    void ExtractAndAdd(){
        /*
        This method is called by the save button action listener.
        This method is used to extract the information from the various text fields and then calls Validate() which validates the input.
        If the input satisfies the validation tests, it goes onto save the record.
        
        */
        
        String fName = tfName.getText();
        fName = fName.replaceAll("\t", " ");
        String lName = tlName.getText();
        lName = lName.replaceAll("\t", " ");
        String mi_in = tmiIn.getText();
        mi_in = mi_in.replaceAll("\t", " ");
        String address1 = taddr1.getText();
        address1 = address1.replaceAll("\t", " ");
        String address2 = taddr2.getText();
        address2 = address2.replaceAll("\t", " ");
        String city = tcity.getText();
        city = city.replaceAll("\t", " ");
        String gender = tgen.getText();
        gender = gender.replaceAll("\t", " ");
        String phone = tphno.getText();
        phone = phone.replaceAll("\t", " ");
        String state = tstate.getText();
        state = state.replaceAll("\t", " ");
        String zip = tzip.getText();
        zip = zip.replaceAll("\t", " ");
        String country = tcountry.getText();
        country = country.replaceAll("\t", " ");
        String email = temail.getText();
        email = email.replaceAll("\t", " ");
        int flag;
        
        if(!("".equals(fName) || "".equals(lName) || "".equals(address1) || "".equals(city) || "".equals(state) || "".equals(phone) || "".equals(zip) || "".equals(gender) || "".equals(country) || "".equals(email))){
            flag = Validate(fName,lName,mi_in,address1,address2,city,gender,phone,state,zip,country,email);
            if(flag==0){
                 AddRecord(fName,lName,mi_in,gender,address1,address2,city,state,zip,phone,country,email);
            }
        }
        else{
            
            lbl_notify.setText("One or more compulsory fields are empty or incorrect");
            lbl_notify.setEnabled(true);
            
           }    
        }
    
    int Validate(String fName,String lName,String mi_in,String address1,String address2,String city,String gender,String phone,String state,String zip,String email,String country){
        /*
        This method is called by the ExtractAndAdd().
        It takes as input the various fields of the record and checks if there size is less than the total size allowed.
        If the size of the field exceeds the total size allowed then it sets the flag as 1.
        The method returns the flag value.
        */
        
        int flag=0; 
        if (fName.trim().length() > 20) {
            flag=1;
        }
        else if (mi_in.trim().length() > 1) {
            flag=1;
        }
        else if (!(gender.equalsIgnoreCase("m")|| gender.equalsIgnoreCase("f")) ) {
            flag=1;
        }
        else if (lName.trim().length() > 20) {
            flag=1;
        }
        else if (address1.trim().length() > 35) {
            flag=1;
        }
        else if (address2.trim().length() > 35) {
            flag=1;
        }
        else if (city.trim().length() > 25) {
            flag=1;
        }
        else if (state.trim().length() > 2) {
            flag=1;
        }
        else if (zip.trim().length() > 9) {
            flag=1;
        }
        else if (phone.trim().length() > 21) {
            flag=1;
    }
        else if (email.trim().length() > 100) {
            flag=1;
    }
        else if (country.trim().length() > 30) {
            flag=1;
    }
        return flag;
    }
    
    void AddRecord(String fName, String lName, String mi_in, String gender, String address1, String address2, String city, String state, String zip, String phone, String country, String email){
        /*
        This method is called by the ExtractAndAdd().
        This method is used to save the details of the record into the .txt file.
        After saving the record the method clears the textfields.
        */
        int flag = 0;
        flag = CheckDuplicate(fName,lName,mi_in,flag);
        if (flag == 0){
            
        try (PrintWriter pw = new PrintWriter(new FileWriter("Contacts.txt", true))) {
                pw.println(fName + "\t" + mi_in + "\t" + lName + "\t" + gender + "\t" + address1 + "\t" + address2 + "\t" + city + "\t" + state + "\t" + zip + "\t" + phone+ "\t" + country+ "\t" + email);
		lbl_notify.setText("Contact Added Successfully");
                lbl_notify.setVisible(true);
                
//clearing the text fields to empty.
                
                tfName.setText("");
                tlName.setText("");
                tmiIn.setText("");
                taddr1.setText("");
                taddr2.setText("");
                tcity.setText("");
                tgen.setText("");
                tphno.setText("");
                tstate.setText("");
                tzip.setText("");
                temail.setText("");
                tcountry.setText("");
                ClearWarning();
            } catch (IOException e) {
            }


//refreshing the table to show the newly added record.                
        table.revalidate();
        table.repaint();
        tableConfig();
        InitialConfig();
        tfName.requestFocusInWindow();

        }
}
    
    private void Delete_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_ButtonActionPerformed
/*
        This method is called when the user clicks the delete button.
        */        

        
        // confirming if the user really wants to delete the record.
        int p = JOptionPane.showConfirmDialog(null,"Do you really want to delete?","Delete",JOptionPane.YES_NO_OPTION);
        if(p == JOptionPane.YES_OPTION)
        {
            DeleteRecord();
            lbl_notify.setText("Contact Deleted Successfully");
            lbl_notify.setVisible(true);
            table.revalidate();
            table.repaint();
            tableConfig();
        }
        Clear();

    }//GEN-LAST:event_Delete_ButtonActionPerformed

    void InitialConfig(){
    /*
    This method is used to reset the form to its intial configuration.
    */
  
  Clear_Button.setEnabled(false);
  Save_Button.setEnabled(true);
  Modify_Button.setEnabled(false);
  Delete_Button.setEnabled(false);
  jProgressBar1.setValue(0);
  tfName.requestFocusInWindow();
                                
}    
    
    void DeleteRecord(){
    /*
    This method is called by the delete button action listener.
    The method is used to store the row number of the record to be deleted in the table into currentRow.
    It then sets the values of the array arr at index currentRow as null. The remaining records are copied back into the array.
    */
    int currentRow = table.getSelectedRow();
        for(int j=0;j<12;j++)
            arr[currentRow][j]= null;
        
            
    try {
        try (PrintWriter pw = new PrintWriter("Contacts.txt","UTF-8")) {
            for (int i = 0;i<table.getRowCount();i++){
                String abc = "";
                for (int j=0;j<12;j++){
                    if(arr[i][j]!=null)
                        abc = abc + arr[i][j] + "\t";
                }
                if(!"".equals(abc)){
                    pw.println(abc);
                }
                
            }
            pw.close();
            
        }
        } catch (IOException e) {
            }
        
}

    private void Clear_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Clear_ButtonActionPerformed
        // This method is invoked when the user clicks on the Clear button.
        Clear();
        Clear_Button.setEnabled(false);
        
        
        
    }//GEN-LAST:event_Clear_ButtonActionPerformed

    void ClearWarning(){
        /*
        This method is used to clear all the validation errors.
        */
    lfname.setText("");
    llname.setText("");
    lmi.setText("");
    laddr1.setText("");
    laddr2.setText("");
    lgen.setText("");
    lcity.setText("");
    lstate.setText("");
    lzip.setText("");
    lph.setText("");
    lemail.setText("");
    lcountry.setText("");
    }
    
    void Clear(){
        // This method is used to clear the text field boxes.
        
        tfName.setText("");
        tlName.setText("");
        tmiIn.setText("");
        taddr1.setText("");
        taddr2.setText("");
        tcity.setText("");
        tgen.setText("");
        tphno.setText("");
        tstate.setText("");
        tzip.setText("");
        tcountry.setText("");
        temail.setText("");
        lbl_notify.setText("");
        ClearWarning();
        InitialConfig();
}
    
    private void tphnoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tphnoKeyPressed
        // This method is called when the user clicks on the phone number text field. It turns the validation label off.
        lph.setVisible(false);
    }//GEN-LAST:event_tphnoKeyPressed

    private void tgenKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tgenKeyPressed
        // This method is called when the user clicks on the gender text field. It turns the validation label off.
        lgen.setVisible(false);
    }//GEN-LAST:event_tgenKeyPressed

    private void taddr1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taddr1KeyPressed
        // This method is called when the user clicks on the address line 1 text field. It turns the validation label off.
        laddr1.setVisible(false);
    }//GEN-LAST:event_taddr1KeyPressed

    private void taddr2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taddr2KeyPressed
        // This method is called when the user clicks on the address line 2 text field. It turns the validation label off.
        laddr2.setVisible(false);
    }//GEN-LAST:event_taddr2KeyPressed

    private void tcityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tcityKeyPressed
        // This method is called when the user clicks on the city text field. It turns the validation label off.
        lcity.setVisible(false);
    }//GEN-LAST:event_tcityKeyPressed

    private void tstateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tstateKeyPressed
        // This method is called when the user clicks on the state text field. It turns the validation label off.
        lstate.setVisible(false);
    }//GEN-LAST:event_tstateKeyPressed

    private void tzipKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tzipKeyPressed
        // This method is called when the user clicks on the zip code text field. It turns the validation label off.
        lzip.setVisible(false);
    }//GEN-LAST:event_tzipKeyPressed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        // TODO add your handling code here: delete
                               
    }//GEN-LAST:event_tableMouseClicked

    private void tlNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tlNameKeyPressed
        // This method is called when the user clicks on the last name text field. It turns the validation label off.
        llname.setVisible(false);

    }//GEN-LAST:event_tlNameKeyPressed

    private void tlNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tlNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tlNameActionPerformed

    private void tmiInKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tmiInKeyPressed
        // This method is called when the user clicks on the middle initial text field. It turns the validation label off.
        lmi.setVisible(false);

    }//GEN-LAST:event_tmiInKeyPressed

    private void tmiInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tmiInActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tmiInActionPerformed

    private void tfNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfNameKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_tfNameKeyTyped

    private void tfNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfNameKeyPressed
        // TODO add your handling code here:
  
    }//GEN-LAST:event_tfNameKeyPressed

    private void tfNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfNameActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_tfNameActionPerformed

    private void tfNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfNameMouseClicked
        // TODO add your handling code here:
       
    }//GEN-LAST:event_tfNameMouseClicked

    private void Modify_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Modify_ButtonActionPerformed
        // This method is called when the user clicks on the update button. It updates the record only if the modified record is not already present in the .txt file.
       
        String fName = tfName.getText();
        String lName = tlName.getText();
        String miIn = tmiIn.getText();
        int flag = 0;
        flag = CheckDuplicate(fName,lName,miIn, flag);
        if(flag==0){
            DeleteRecord();
            ExtractAndAdd();
        }
    }//GEN-LAST:event_Modify_ButtonActionPerformed

    private void tfNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfNameFocusLost
        // This method is called when the user loses focus from the first name text field. It checks the field for certain validation errors.
        String fName = tfName.getText();
        fName = fName.replaceAll("\t", " ");
        if (fName.trim().equals("")) {
            lfname.setText("This field cannot be left empty");
            lfname.setVisible(true);
            CalculateProgress();
        } else if (fName.trim().length() > 20) {
            lfname.setText("Maximum 20 characters");
            tfName.requestFocusInWindow();
            lfname.setVisible(true);
        }
        else{
            lfname.setText("");
            CalculateProgress();
        }
    }//GEN-LAST:event_tfNameFocusLost

    private void tmiInFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tmiInFocusLost
    // This method is called when the user loses focus from the middle initial text field. It checks the field for certain validation errors.
        String mi_in = tmiIn.getText();
        mi_in = mi_in.replaceAll("\t", " ");
        if (mi_in.trim().length() > 1) {
            lmi.setText("Maximum 1 character");
            tmiIn.requestFocusInWindow();
            lmi.setVisible(true);
        }
        else{
            lmi.setText(" ");
            CalculateProgress();
        }
    }//GEN-LAST:event_tmiInFocusLost

    private void tlNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tlNameFocusLost
    // This method is called when the user loses focus from the last name text field. It checks the field for certain validation errors.
        String lName = tlName.getText();
        lName = lName.replaceAll("\t", " ");
        if (lName.trim().equals("")) {
            llname.setText("This field cannot be left empty");
            llname.setVisible(true);
            CalculateProgress();
        } else if (lName.trim().length() > 20) {
            llname.setText("Maximum 20 characters");
            tlName.requestFocusInWindow();
            llname.setVisible(true);
        }
        else{
            llname.setText(" ");
            CalculateProgress();
        }
    }//GEN-LAST:event_tlNameFocusLost

    private void tgenFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tgenFocusLost
    // This method is called when the user loses focus from the gender text field. It checks the field for certain validation errors.
        String gender = tgen.getText();
        gender = gender.replaceAll("\t", " ");        
        if (!(gender.equalsIgnoreCase("m") || gender.equalsIgnoreCase("f"))) {
            lgen.setText("Gender can only be M or F");
            lgen.setVisible(true);
        }
        else{
            lgen.setText(" ");
            CalculateProgress();
        }
    }//GEN-LAST:event_tgenFocusLost

    private void taddr1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_taddr1FocusLost
    // This method is called when the user loses focus from the address line 1 text field. It checks the field for certain validation errors.
        String address1 = taddr1.getText();
        address1 = address1.replaceAll("\t", " ");          
        if (address1.trim().equals("")) {
            laddr1.setText("This field cannot be left empty");
            laddr1.setVisible(true);
            CalculateProgress();
        } else if (address1.trim().length() > 35) {
            laddr1.setText("Maximum 35 characters");
            taddr1.requestFocusInWindow();
            laddr1.setVisible(true);
        }
        else{
            laddr1.setText(" ");
            CalculateProgress();
        }
    }//GEN-LAST:event_taddr1FocusLost

    private void taddr2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_taddr2FocusLost
    // This method is called when the user loses focus from the address line 2 text field. It checks the field for certain validation errors.
        String address2 = taddr2.getText();
        address2 = address2.replaceAll("\t", " "); 
        if (address2.trim().length() > 35) {
            laddr2.setText("Maximum 35 characters");
            taddr2.requestFocusInWindow();
            laddr2.setVisible(true);
        }
        else{
            laddr2.setText(" ");
            CalculateProgress();
        }
    }//GEN-LAST:event_taddr2FocusLost

    private void tcityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tcityFocusLost
    // This method is called when the user loses focus from the city text field. It checks the field for certain validation errors.
        String city = tcity.getText();
        city = city.replaceAll("\t", " "); 
        if (city.trim().equals("")) {
            lcity.setText("This field cannot be left empty");
            lcity.setVisible(true);
            CalculateProgress();
        } else if (city.trim().length() > 25) {
            lcity.setText("Maximum 25 characters");
            tcity.requestFocusInWindow();
            lcity.setVisible(true);
        }
        else{
            lcity.setText(" ");
            CalculateProgress();
        }
    }//GEN-LAST:event_tcityFocusLost

    private void tstateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tstateFocusLost
    // This method is called when the user loses focus from the state text field. It checks the field for certain validation errors.
        String state = tstate.getText();
        state = state.replaceAll("\t", " "); 
        if (state.trim().equals("")) {
            lstate.setText("This field cannot be left empty");
            lstate.setVisible(true);
            CalculateProgress();
        } else if (state.trim().length() > 2) {
            lstate.setText("Maximum 2 characters");
            tstate.requestFocusInWindow();
            lstate.setVisible(true);
        }
        else{
            lstate.setText(" ");
            CalculateProgress();
        }
    }//GEN-LAST:event_tstateFocusLost

    private void tzipFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tzipFocusLost
    // This method is called when the user loses focus from the zip code text field. It checks the field for certain validation errors.
        String zip = tzip.getText();
        zip = zip.replaceAll("\t", " "); 
        if (zip.trim().equals("")) {
            lzip.setText("This field cannot be left empty");
            lzip.setVisible(true);
            CalculateProgress();
            
        } else if (zip.trim().length() > 9) {
            lzip.setText("Maximum 9 characters");
            tzip.requestFocusInWindow();
            lzip.setVisible(true);
        }
        else{
            lzip.setText(" ");
            CalculateProgress();
        }
    }//GEN-LAST:event_tzipFocusLost

    private void tphnoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tphnoFocusLost
    // This method is called when the user loses focus from the phone number text field. It checks the field for certain validation errors.
        String phone = tphno.getText();
        phone = phone.replaceAll("\t", " "); 
        if (phone.trim().equals("")) {
            lph.setText("This field cannot be left empty");
            lph.setVisible(true);
            CalculateProgress();
            
        } else if (phone.trim().length() > 21) {
            lph.setText("Maximum 21 characters");
            tphno.requestFocusInWindow();
            lph.setVisible(true);
        }
        else{
            lzip.setText(" ");
            CalculateProgress();
        }
    }//GEN-LAST:event_tphnoFocusLost

    private void tcountryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tcountryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tcountryActionPerformed

    private void tcountryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tcountryFocusLost
    // This method is called when the user loses focus from the country text field. It checks the field for certain validation errors.
        String country = tcountry.getText();
        country = country.replaceAll("\t", " "); 
        if (country.trim().equals("")) {
            lcountry.setText("This field cannot be left empty");
            lcountry.setVisible(true);
            CalculateProgress();
            
        } else if (country.trim().length() > 30) {
            lcountry.setText("Maximum 30 characters");
            tcountry.requestFocusInWindow();
            lcountry.setVisible(true);
        }
        else{
            lcountry.setText(" ");
            CalculateProgress();
        }
    }//GEN-LAST:event_tcountryFocusLost

    private void temailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_temailFocusLost
    // This method is called when the user loses focus from the Email text field. It checks the field for certain validation errors.
        String email = temail.getText();
        email = email.replaceAll("\t", " "); 
        boolean mail = email.matches("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"+ "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");
        if (email.trim().equals("")) {
            lemail.setText("This field cannot be left empty");
            lemail.setVisible(true);
            CalculateProgress();
            
        } else if (email.trim().length() > 100) {
            lemail.setText("Maximum 100 characters");
            temail.requestFocusInWindow();
            lemail.setVisible(true);
            
        }
        else if(mail==false){
            lemail.setText("E-Mail address not valid");
            temail.requestFocusInWindow();
            lemail.setVisible(true);
            
        }
        else{
            lemail.setText(" ");
            CalculateProgress();
        }
    }//GEN-LAST:event_temailFocusLost

    void CalculateProgress(){
    /*
    This method is used to calculate the value of the progress bar.
    */
    jProgressBar1.setStringPainted(true);
    String fname = tfName.getText();
    String lname = tlName.getText();
    String gen = tgen.getText();
    String addr1 = taddr1.getText();
    String phone = tphno.getText();
    String city = tcity.getText();
    String state = tstate.getText();
    String zip = tzip.getText();
    String country = tcountry.getText();
    String email = temail.getText();
    String valid[] = {fname,lname,gen,addr1,phone,city,state,zip,country,email};
    int count=0;
    float total;
    for(int i=0;i<valid.length;i++){
        if(!"".equals(valid[i])){
            count++;
        }
    }
    
    total = (count*100)/10; 
    
    
    if(total==100.0){
        jProgressBar1.setValue((int) total);
    }
    else{
        jProgressBar1.setStringPainted(true);
        jProgressBar1.setValue((int) total);
    }
}
    
    
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ContactManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
    //</editor-fold>
    
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(() -> {
            new ContactManager().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Clear_Button;
    private javax.swing.JButton Delete_Button;
    private javax.swing.JButton Modify_Button;
    private javax.swing.JButton Save_Button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private static javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel laddr1;
    private javax.swing.JLabel laddr2;
    private javax.swing.JLabel lbl_addr1;
    private javax.swing.JLabel lbl_addr2;
    private javax.swing.JLabel lbl_city;
    private javax.swing.JLabel lbl_fname;
    private javax.swing.JLabel lbl_gen;
    private javax.swing.JLabel lbl_info;
    private javax.swing.JLabel lbl_lname;
    private javax.swing.JLabel lbl_mi;
    private javax.swing.JLabel lbl_notify;
    private javax.swing.JLabel lbl_phno;
    private javax.swing.JLabel lbl_state;
    private javax.swing.JLabel lbl_zip;
    private javax.swing.JLabel lcity;
    private javax.swing.JLabel lcountry;
    private javax.swing.JLabel lemail;
    private javax.swing.JLabel lfname;
    private javax.swing.JLabel lgen;
    private javax.swing.JLabel llname;
    private javax.swing.JLabel lmi;
    private javax.swing.JLabel lph;
    private javax.swing.JLabel lstate;
    private javax.swing.JLabel lzip;
    private javax.swing.JTable table;
    private javax.swing.JTextField taddr1;
    private javax.swing.JTextField taddr2;
    private javax.swing.JTextField tcity;
    private javax.swing.JTextField tcountry;
    private javax.swing.JTextField temail;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tgen;
    private javax.swing.JTextField tlName;
    private javax.swing.JTextField tmiIn;
    private javax.swing.JTextField tphno;
    private javax.swing.JTextField tstate;
    private javax.swing.JTextField tzip;
    // End of variables declaration//GEN-END:variables
}
